//---GLOBALS GO HERE---//Progress Bar// Starting value for progress barvar progBarVal = 0;var tempProg = 0;// build progress bar palettevar totalProgress = 0;var progPalWidth = 450;var progPalText = "This conversion can take several minutes." //updates/changesvar progPalStillText = "Press Esc to cancel. Do not attempt to use Photoshop." //does not changevar progPalTitleText = "SiteGrinder 3 Hint Conversion Tool";var appVersionNum = parseInt(version.split('.')[0]);var osType = 'windows';var progprogressPal;var progLayerVal = 0;function initWin(){	if (appVersionNum >= 9) {		if (osType == "windows") {			progressPal = new Window("palette{text:'" + progPalTitleText + "',bounds:[100,100,550,180],progress:Progressbar{bounds:[20,45,430,61],minvalue:0,maxvalue:" + totalProgress + ",value:" + progBarVal + "}};");		}		else {			progPalWidth = 650; //make it wider to suit Mac OS X			progressPal = new Window("palette{text:'" + progPalTitleText + "',bounds:[100,100,750,180],progress:Progressbar{bounds:[20,45,630,61],minvalue:0,maxvalue:" + totalProgress + ",value:" + progBarVal + "}};");		}	}	else {		//for CS1 the progressbar UI object is not supported...so make it text-based		progressPal = new Window("palette{text:'" + progPalTitleText + "',bounds:[100,100,550,150]};");	}	//Add optional additional text items for info/readouts.	progressPal.progressPalStillTxt = progressPal.add("statictext", [20, 3, progPalWidth, 23], progPalStillText);	progressPal.progressPalStatTxt = progressPal.add("statictext", [20, 24, progPalWidth, 44], progPalText);		myProgress();	layerCounter(app.activeDocument);	totalProgress+=app.activeDocument.layerComps.length;	if(appVersionNum >= 9) {	   progressPal.progress.maxvalue = totalProgress;	}		myProgress(); 		//---END GLOBALS---}//update progress bar value...use this block per layer completion/*tempProg++;if (tempProg >= totalProgress) {   progBarVal = totalProgress;} else {   progBarVal = tempProg;}myProgress(); *///--done with update block//This is the progress bar update function...I've fixed the lost focus problem here as wellfunction myProgress(){	progBarVal++;   if(appVersionNum >= 9) {      progressPal.progress.value = progBarVal;   } else {      progLayerVal = progBarVal;      progressPal.progressPalStatTxt.text = "Running...  Overall Progress:  " + parseInt(100*(progLayerVal/totalProgress)) + "% complete.";   }   progressPal.center();   progressPal.show();   progressPal.hide();   progressPal.show();}//This function will collect the total layer count for the file.function layerCounter(inObj)  // recursive function to count total layers layers{    totalProgress+= inObj.artLayers.length;           for( var i = 0; i < inObj.layerSets.length; i++) {        totalProgress++;      layerCounter(inObj.layerSets[i]);  // recursive call to layerCount    }}//Init Progress Bar//Call this block at the very start of your script./*What this does:NOTES:galleries are tiny bit complicated.  Right now someone might have  bob-picturebox and linda-thumbsheet in SG2 and things are fine. But in SG3 they need both to be bob.next-button  to  bob-next-buttonsame for the other gallery buttons.Not sure what to do with up-button.  Nor multi-page galleries.so if it's really smart it can activate the gallery comps then convert the visible elementsthrow warnings for some others:  -img (not worth converting to -content, due to overabuse).-rrect, -haslinks.warning for -grow.  no simple way of converting.interior-tile would be difficult interiorgrowtile  would be out too.Updates the following Layer and Layer Comp hints:	-rollover & -r to -hover	-gallery to -page on layer comps	-popup to -hovershow	-popdown to -hoverhide	-slideshow to -picturebox.	-menu layerset to -hovershow layerset.    -exterior-tile to browser-background		Throws the following warnings:// BEGIN__HARVEST_EXCEPTION_ZSTRING<javascriptresource><name>$$$/JavaScripts/SiteGrinder2To3Helper/Menu=SiteGrinder 2 to 3 Helper...</name><about>$$$/JavaScripts/SiteGrinder2To3Helper/About=Changes hints from SiteGrinder 2 to SiteGrinder 3.</about><category>sitegrinder</category><enableinfo>true</enableinfo></javascriptresource>// END__HARVEST_EXCEPTION_ZSTRING*///=================================================================// Globals//=================================================================// UI strings to be localizedvar uiAlertDocumentMustBeOpened = "You must have a document open to convert!";var warningsReported = [];var layerHintReplacements = [// IMPORTANT: only warnings for hints that don't have replacements can contain spaces, and they HAVE to contain spaces for the sytem to work	['-grow','The -grow hint is no longer supported.  Use the new -column and -footer hints for SiteGrinder 3s more powerful layout features.\n\n'],	['-img','Some of your layers use the -img hint.  This is no longer supported.  If these layers really represent content then use the new -content hint.\n\n'],	['-menu', 'You are using the -menu hint on some layers. If any are submenus you will need to change their hint from -menu to -menu-hovershow for SG3\n\n'],	['-rollover','-hover'],	['-r','-hover'],	['-popup','-hovershow'],	['-popdown','-hoverhide'],	['-literal','-embed'],	['-slideshow','-picturebox'],	['exterior-tile','browser-background'],	['interior-tile', 'The tiling system has changed from SiteGrinder 3.  See the documentation on the -background and -column hints.\n\n'],	['interiorgrow-tile', 'The tiling system has changed from SiteGrinder 3.  See the documentation on the -background and -column hints.\n\n'],	['-rrect','The -rrect hint is no longer supported.  See the documentation for the more powerful -centercut hint.\n\n']];var layerSetHintReplacements = [	['-menu','-hovershow'],	['-rollover','-hover'],	['-r','-hover'],	['-popup','-hovershow'],	['-popdown','-hoverhide'],	['-thumb', 'The thumb hint is no longer supported for layer groups.  Refer to the documentation on the new -panel hint. \n\n']];var layerCompHintReplaceents = [	['gallery','page']];var galleryHints = [	'-thumbsheet',	'-thumb',	'-metadata',	'-picturebox',	'next-button',	'nextset-button',	'prevset-button',	'previous-button',	'prev-button',	'next-rollover',	'previous-rollover',	'prev-rollover',	'next-popup',	'previous-popup',	'prev-popup'];var conversionReport = "The script has finished running.  The following may require additional action: \n\n";var weveBeenWarned=false;//=================================================================// Functions//=================================================================function displayStartDialog() {    var dlgMain = new Window("dialog", "Smart Layer Group Duplicator for SiteGrinder 3");        // match our dialog background color to the host application//	var brush = dlgMain.graphics.newBrush(dlgMain.graphics.BrushType.THEME_COLOR, "appDialogBackground");    // This brush stuff screws up on C3  //  dlgMain.graphics.backgroundColor = brush;    //dlgMain.graphics.disabledBackgroundColor = brush;	dlgMain.orientation = 'column';	dlgMain.alignChildren = 'left';	    dlgMain.etHelp = dlgMain.add("statictext", undefined, "This script converts SiteGrinder 2 hints to their SiteGrinder 3 equivalents.  It creates a copy of the current document before making any changes.  With complex designs the conversion process can take several minutes.", {multiline:true});    dlgMain.etHelp.alignment = 'fill';		// -- top of the dialog, first line   	dlgMain.btnRun = dlgMain.add("button", undefined, "Run" );    dlgMain.btnRun.onClick = function() {		dlgMain.close(1);	}	dlgMain.btnCancel = dlgMain.add("button", undefined, "Cancel" );    dlgMain.btnCancel.onClick = function() { 		dlgMain.close(0); 	}	//dlgMain.defaultElement = dlgMain.btnRun;	dlgMain.cancelElement = dlgMain.btnCancel;    // in case we double clicked the file    app.bringToFront();    dlgMain.center();        var result = dlgMain.show();      		return result;  // close to quit}function arrayContainsString(arr,str) {	for(var i = 0; i < arr.length; i++ ){		if (arr[i] == str) {			return true;		}	}	return false;}function reportWarning(warningArray) {	weveBeenWarned = true;	if(!arrayContainsString(warningsReported, warningArray[0])) {		warningsReported.push(warningArray[0]);		conversionReport += warningArray[1];	}}function fixUpAllLayers(dupObj, orgObj, dupDocRef)  // obj can be DocRef or LayerSet{    for( var i = 0; i < dupObj.artLayers.length; i++) 	{        var origLayer = dupObj.artLayers[i];		if(!origLayer.isBackgroundLayer)		{			var layerName = origLayer.name;  // store layer name before change doc			var newName = checkLayerHints(layerName);			origLayer.name=newName;		}		myProgress();    }    for( var i = 0; i < dupObj.layerSets.length; i++) 	{         fixUpAllLayers(dupObj.layerSets[i], orgObj.layerSets[i], dupDocRef);  // recursive call         dupObj.layerSets[i].name = iterateHints(layerSetHintReplacements, dupObj.layerSets[i].name);    }}function getAllVisibleLayerRefs(doc, lays) {    for( var i = 0; i < doc.artLayers.length; i++) 	{		var d = doc.artLayers[i];        if (d.visible) { lays.push(d); }   }    for( var i = 0; i < doc.layerSets.length; i++) 	{		var dd = doc.layerSets[i];		if (dd.visible) {			getAllVisibleLayerRefs(dd, lays); // recursive call		}    }	return lays;}function fixUpLayerComps(doc) {   var compsCount = doc.layerComps.length;   for( var curComp = 0; curComp < compsCount; curComp++) {		myProgress();		var compName = doc.layerComps[curComp].name;		if(indexOfIgnoreCase(compName,'-gallery') >= 0) {			fixGalleryComp(doc,curComp);		}   }}function indexOfIgnoreCase(searchIn, lookFor) {	var lookForLow = lookFor.toLowerCase();	var searchInLow = searchIn.toLowerCase();	return searchInLow.indexOf(lookForLow);}function fixGalleryComp(doc,compNum) {	var visLays = [];	doc.layerComps[compNum].apply();	visLays = getAllVisibleLayerRefs(doc,visLays);	var galName = doc.layerComps[compNum].name.substring(0,indexOfIgnoreCase(doc.layerComps[compNum].name,'-gallery'));	if(galName == " " || galName == "") { galName = "Untitled"; }	for(var curLay = 0 ; curLay < visLays.length; curLay++) {		for (var curHint = 0; curHint < galleryHints.length; curHint++) {			if (indexOfIgnoreCase(visLays[curLay].name,galleryHints[curHint]) >= 0) {				var newName = "";				var origName = visLays[curLay].name;				if(galleryHints[curHint].charAt(0) == '-') {					newName = galName + galleryHints[curHint];				} else {					if (indexOfIgnoreCase(visLays[curLay].name,'next-button') >=0) {						newName =galName + '-next-button';					} else if (indexOfIgnoreCase(visLays[curLay].name ,'prev-button')>=0 || indexOfIgnoreCase(visLays[curLay].name, 'previous-button')>=0) {						newName = galName + '-previous-button';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'nextset-button')>=0) {						newName = galName + '-nextthumbset-button';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'prevset-button')>=0) {						newName = galName + '-previousthumbset-button';					}else if (indexOfIgnoreCase(visLays[curLay].name, 'nextset-rollover')>=0) {						newName = galName + '-nextthumbset-hover';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'prevset-rollover')>=0) {						newName = galName + '-previousthumbset-hover';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'next-rollover')>=0) {						newName = galName + '-next-hover';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'prev-rollover')>=0 || indexOfIgnoreCase(visLays[curLay].name, 'previous-rollover')>=0) {						newName = galName + '-previous-hover';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'next-popup')>=0) {						newName = galName + '-next-hovershow';					} else if (indexOfIgnoreCase(visLays[curLay].name, 'prev-popup')>=0 || indexOfIgnoreCase(visLays[curLay].name, 'previous-popup')>=0) {						newName = galName + '-previous-hovershow';					}				}				if(indexOfIgnoreCase(origName,'-text')>=0) { newName = newName + '-text'; }				if(indexOfIgnoreCase(origName,'-g')>=0 && indexOfIgnoreCase(origName,'-grow')== -1) { newName=newName + '-g'; }				visLays[curLay].name = newName;				break;			}		}	}	doc.layerComps[compNum].name = galName + '-page';}function replaceNoCase(findIn, find, replace) {	//alert(findIn + " " + find + " " + replace);	var findInLow = findIn.toLowerCase();	var findLow = find.toLowerCase();	var loc = findInLow.indexOf(findLow);	if(loc >= 0) {		return findIn.substring(0,loc) + replace + findIn.substring(loc+find.length,findIn.length);	}	else return findIn;}function checkLayerHints(oldName) {	return iterateHints(layerHintReplacements,oldName);}function iterateHints(hintArray,layName) {	var newName = layName;	for(var curHint = 0; curHint < hintArray.length; curHint++) {		var repl = hintArray[curHint][1];		if (repl.indexOf(' ')>=0) { // only warnings for hints that don't have replacements contain spaces			if(indexOfIgnoreCase(layName,hintArray[curHint][0])>=0) {				reportWarning(hintArray[curHint]);			}		}		else {			if (notAGalleryLayer(layName)) {				newName = replaceNoCase(newName,hintArray[curHint][0], repl);			}		}	}	//alert('end IterateHints');	return newName;}function notAGalleryLayer(layName) {	for(var curGalHint = 0; curGalHint < galleryHints.length; curGalHint++) {		if(indexOfIgnoreCase(layName,galleryHints[curGalHint])>=0) { return false; }	}	return true;}function doIt() {	initWin();	var docName = app.activeDocument.name;  // save the app.activeDocument name before duplicate.		var layerCount = app.documents[docName].layers.length;	var layerSetsCount = app.documents[docName].layerSets.length;		app.activeDocument = app.documents[docName];	var duppedDocument = app.activeDocument.duplicate();	duppedDocument.activeLayer = duppedDocument.layers[duppedDocument.layers.length-1];		fixUpLayerComps(duppedDocument);	fixUpAllLayers(duppedDocument, app.documents[docName], duppedDocument);}function main(){	   if ( app.documents.length <= 0 ) {        alert( uiAlertDocumentMustBeOpened );        return;    }	if(displayStartDialog()) {		try 		{			//var dlgMain = new Window("dialog", "SG2 to SG3 Hint Helper");			//dlgMain.orientation = 'column';			//dlgMain.alignChildren = 'left';			// -- top of the dialog, first line			//dlgMain.add("statictext", undefined, "One moment please...");			//dlgMain.onShow = doIt;			//result = dlgMain.show();						doIt();					} catch (e) {			alert(e);		}		//dlgMain.close();		progressPal.hide();		if (weveBeenWarned) {			alert(conversionReport);		} else {			alert("The script has completed.");		}	}}//===============================================================// Dispatch//===============================================================main();